---
name: Pull Request

on:
  pull_request:

env:
  ENVIRONMENT: dev
  IMAGE_NAME: domain-manager-api
  ECR_URI: ${{ secrets.ECR_URI }}
  REGION: us-east-1
  PIP_CACHE_DIR: ~/.cache/pip
  PRE_COMMIT_CACHE_DIR: ~/.cache/pre-commit
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v1
        with:
          python-version: 3.8
      - name: Store installed Python version
        run: |
          echo "::set-env name=PY_VERSION::"\
          "$(python -c "import platform;print(platform.python_version())")"
      - name: Cache pip test requirements
        uses: actions/cache@v1
        with:
          path: ${{ env.PIP_CACHE_DIR }}
          key: "${{ runner.os }}-pip-test-py${{ env.PY_VERSION }}-\
            ${{ hashFiles('**/requirements-test.txt') }}"
          restore-keys: |
            ${{ runner.os }}-pip-test-py${{ env.PY_VERSION }}-
            ${{ runner.os }}-pip-test-
            ${{ runner.os }}-pip-
      - name: Cache pre-commit hooks
        uses: actions/cache@v1
        with:
          path: ${{ env.PRE_COMMIT_CACHE_DIR }}
          key: "${{ runner.os }}-pre-commit-py${{ env.PY_VERSION }}-\
            ${{ hashFiles('**/.pre-commit-config.yaml') }}"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade --requirement requirements-test.txt
      - name: Set up pre-commit hook environments
        run: pre-commit install-hooks
      - name: pre-commit autoupdate
        run: pre-commit autoupdate
      - name: Run pre-commit on all files
        run: pre-commit run --all-files

  python_tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: create env file
        run: |
          touch .env
          cat <<EOT >> .env
          FLASK_APP=main
          FLASK_ENV=development
          DEBUG=1
          API_KEY=test
          MONGO_INITDB_ROOT_PASSWORD=rootpassword
          MONGO_INITDB_ROOT_USERNAME=root
          MONGO_INITDB_DATABASE=domain_management
          DB_HOST=db
          DB_PORT=27017
          DB_PW=rootpassword
          DB_USER=root
          MONGO_TYPE=MONGO
          BROWSERLESS_ENDPOINT=dm-browserless:3000
          MAX_CONCURRENT_SESSIONS=10
          AWS_DEFAULT_REGION=us-east-1
          TEMPLATE_BUCKET=test
          EOT
      - name: make up
        run: docker-compose up -d
      - name: Pytest/Coverage
        run: |
          docker exec dm-api coverage run -m pytest --disable-warnings
          docker exec dm-api coverage report -i
