name: Deploy Dev

on:
  push:
    branches:
      - develop

env:
  ENVIRONMENT: dev
  IMAGE_NAME: domain-manager-api
  ECR_URI: ${{ secrets.ECR_URI }}
  REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  TF_BUCKET: con-pca-terraform
  TF_DYNAMO_TABLE: con-pca-tf-lock

jobs:
  build:
    runs-on: ubuntu-latest

    outputs:
      tag: ${{ steps.vars.outputs.tag }}

    steps:
      - uses: actions/checkout@v2

      - name: Get Tag
        id: vars
        run: echo ::set-output name=tag::$(echo ${GITHUB_SHA:0:10})

      - name: Build Docker Image
        run: docker build -t $IMAGE_NAME:${{steps.vars.outputs.tag}} .

      - name: Tag Docker Image
        run: docker tag $IMAGE_NAME:${{steps.vars.outputs.tag}} $ECR_URI:${{steps.vars.outputs.tag}}

      - name: ECR Login
        run: aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $ECR_URI

      - name: Push Docker Image
        run: docker push $ECR_URI:${{steps.vars.outputs.tag}}

  terraform_apply:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - uses: actions/checkout@v2

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.12.28

      - name: Verify Terraform version
        run: terraform --version

      - name: Terraform init
        working-directory: ./terraform
        run: terraform init -input=false -backend-config="bucket=$TF_BUCKET" -backend-config="key=tfstate/$ENVIRONMENT/$IMAGE_NAME.tfstate" -backend-config="region=$REGION" -backend-config="dynamodb_table=$TF_DYNAMO_TABLE"

      - name: Terraform validation
        working-directory: ./terraform
        run: terraform validate

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -input=false -var="image_tag=${{needs.build.outputs.tag}}" -var="env=$ENVIRONMENT" -var="image_repo=$ECR_URI"

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve -input=false -var="image_tag=${{needs.build.outputs.tag}}" -var="env=$ENVIRONMENT" -var="image_repo=$ECR_URI"
